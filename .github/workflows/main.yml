name: Deploy to Azure Container App (main)

on:
  push:
    branches:
      - main
    paths:
      - 'app.py'
      - 'Dockerfile'
      - '.github/workflows/main.yml'
  workflow_dispatch:

jobs:
  deploy-and-scan:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Lint
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 app.py || echo "Lint warnings found"

      # 3) Static analysis (Bandit)
      - name: Scan Python code with Bandit
        run: |
          pip install bandit
          bandit -r . || echo "Bandit scan completed"

      # 4) Login în Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 5) Build & push imagine Docker
      - name: Build and Push Docker image
        run: |
          docker build -t houracr.azurecr.io/hour-app:${{ github.sha }} .
          az acr login --name houracr
          docker push houracr.azurecr.io/hour-app:${{ github.sha }}

      # 6) Creează mediu Container App (dacă nu există)
      - name: Create Container App Environment (if needed)
        run: |
          ENV_EXISTS=$(az containerapp env show --name hour-env --resource-group my-rg --query name -o tsv || echo "")
          if [ -z "$ENV_EXISTS" ]; then
            az containerapp env create --name hour-env --resource-group my-rg --location westeurope
          fi

      # 7) Creează sau actualizează Container App
      - name: Create or Update Container App
        run: |
          APP_EXISTS=$(az containerapp show --name hour-app --resource-group my-rg --query name -o tsv || echo "")
          if [ -z "$APP_EXISTS" ]; then
            az containerapp create \
              --name hour-app \
              --resource-group my-rg \
              --environment hour-env \
              --image houracr.azurecr.io/hour-app:${{ github.sha }} \
              --target-port 5000 \
              --ingress external \
              --registry-server houracr.azurecr.io \
              --cpu 0.25 --memory 0.5Gi
          else
            az containerapp update \
              --name hour-app \
              --resource-group my-rg \
              --image houracr.azurecr.io/hour-app:${{ github.sha }} \
              --cpu 0.25 --memory 0.5Gi
          fi

      # 8) Validează că aplicația răspunde
      - name: Validate deployment is running
        id: get-url
        run: |
          URL=$(az containerapp show \
            --name hour-app \
            --resource-group my-rg \
            --query properties.configuration.ingress.fqdn \
            -o tsv)
          echo "APP_URL=https://$URL" >> $GITHUB_ENV
          curl -f https://$URL || exit 1

      # 9) Scanare imagine Docker cu Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: houracr.azurecr.io/hour-app:${{ github.sha }}

      # 10) Creează directorul pentru rapoarte ZAP
      - name: Create zap-results directory
        run: |
          mkdir -p zap-results
          chmod -R 777 zap-results

      # 11) Rulează OWASP ZAP baseline
      - name: Run OWASP ZAP
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/zap-results:/zap/wrk \
            -w /zap/wrk \
            ghcr.io/zaproxy/zaproxy \
            zap-baseline.py \
            -t ${{ env.APP_URL }} \
            -r zap-report.html \
            -d -T 60 || true   # nu oprește pipeline-ul la alerte

      # 12) Publică raportul ZAP în GitHub Pages
      - name: Publish ZAP report to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: zap-results
          destination_dir: zap-main-report
          keep_files: true
