name: Deploy to Azure Container App (test)

on:
  push:
    branches: [ test ]
    paths:
      - 'app.py'
      - 'Dockerfile'
      - '.github/workflows/deploy-test.yml'

  pull_request:
    branches: [ test ]

  workflow_dispatch:

jobs:
  build-and-deploy:
    if: github.ref == 'refs/heads/test' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 app.py || echo "Lint warnings found"

      - name: Scan Python code with Bandit
        run: |
          pip install bandit
          bandit -r . || echo "Bandit scan completed"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install dependencies for tests
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run unit/integration tests
        run: |
          PYTHONPATH=. pytest tests

      - name: Build Docker image
        run: |
          docker build -t houracr.azurecr.io/hour-app-tst:${{ github.sha }} .

      - name: Login to ACR
        run: az acr login --name houracr

      - name: Push Docker image to ACR
        run: docker push houracr.azurecr.io/hour-app-tst:${{ github.sha }}

      - name: Create Container App Environment (if needed)
        run: |
          ENV_EXISTS=$(az containerapp env show --name hour-env --resource-group my-rg --query name -o tsv || echo "")
          if [ -z "$ENV_EXISTS" ]; then
            az containerapp env create \
              --name hour-env \
              --resource-group my-rg \
              --location westeurope
          fi

      - name: Create or Update Container App
        run: |
          APP_EXISTS=$(az containerapp show --name hour-app-tst --resource-group my-rg --query name -o tsv || echo "")
          if [ -z "$APP_EXISTS" ]; then
            az containerapp create \
              --name hour-app-tst \
              --resource-group my-rg \
              --environment hour-env \
              --image houracr.azurecr.io/hour-app-tst:${{ github.sha }} \
              --target-port 5000 \
              --ingress external \
              --registry-server houracr.azurecr.io \
              --cpu 0.25 \
              --memory 0.5Gi
          else
            az containerapp update \
              --name hour-app-tst \
              --resource-group my-rg \
              --image houracr.azurecr.io/hour-app-tst:${{ github.sha }} \
              --cpu 0.25 \
              --memory 0.5Gi
          fi

      - name: Get app URL
        id: get-url
        run: |
          FQDN=$(az containerapp show \
            --name hour-app-tst \
            --resource-group my-rg \
            --query properties.configuration.ingress.fqdn \
            -o tsv)
          echo "APP_URL=https://${FQDN}" >> $GITHUB_ENV
          curl -f https://${FQDN}

      - name: Run OWASP ZAP baseline scan
        run: |
          if [ -z "${{ env.APP_URL }}" ]; then echo "APP_URL not found, skipping ZAP"; exit 0; fi
          mkdir -p zap-results && chmod -R 777 zap-results
          docker run --rm \
            -v ${{ github.workspace }}/zap-results:/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t ${{ env.APP_URL }} \
            -r zap-report.html \
            -w zap-report.md \
            -T 60 || true

      - name: Upload ZAP HTML report
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: zap-results/zap-report.html

      - name: Vulnerability scan of image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: houracr.azurecr.io/hour-app-tst:${{ github.sha }}
