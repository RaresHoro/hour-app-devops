name: Deploy to Azure Container App (dev)

on:
  push:
    branches:
      - dev
    paths:
      - 'app.py'
      - 'Dockerfile'
      - '.github/workflows/deploy-dev.yml'

permissions:
  contents: read
  security-events: write

jobs:
  static-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 app.py || echo "Lint warnings found"

      - name: Scan Python code with Bandit
        run: |
          pip install bandit
          bandit -r . || echo "Bandit scan completed"

  deploy:
    needs: static-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and Push Docker image
        run: |
          docker build -t houracr.azurecr.io/hour-app-dev:${{ github.sha }} .
          az acr login --name houracr
          docker push houracr.azurecr.io/hour-app-dev:${{ github.sha }}

      - name: Create Container App Environment (if needed)
        run: |
          ENV_EXISTS=$(az containerapp env show --name hour-env --resource-group my-rg --query name -o tsv || echo "")
          if [ -z "$ENV_EXISTS" ]; then
            az containerapp env create --name hour-env --resource-group my-rg --location westeurope
          fi

      - name: Create or Update Container App
        run: |
          APP_EXISTS=$(az containerapp show --name hour-app-dev --resource-group my-rg --query name -o tsv || echo "")
          if [ -z "$APP_EXISTS" ]; then
            az containerapp create \
              --name hour-app-dev \
              --resource-group my-rg \
              --environment hour-env \
              --image houracr.azurecr.io/hour-app-dev:${{ github.sha }} \
              --target-port 5000 \
              --ingress external \
              --registry-server houracr.azurecr.io \
              --cpu 0.25 --memory 0.5Gi
          else
            az containerapp update \
              --name hour-app-dev \
              --resource-group my-rg \
              --image houracr.azurecr.io/hour-app-dev:${{ github.sha }} \
              --cpu 0.25 --memory 0.5Gi
          fi

      - name: Validate deployment
        id: get-url
        run: |
          URL=$(az containerapp show \
            --name hour-app-dev \
            --resource-group my-rg \
            --query properties.configuration.ingress.fqdn \
            -o tsv)
          echo "APP_URL=https://$URL" >> $GITHUB_ENV
          curl -f https://$URL || exit 1

  security-scan:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Vulnerability scan of image (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: houracr.azurecr.io/hour-app-dev:${{ github.sha }}

      - name: Prepare ZAP SARIF scan
        run: |
          mkdir -p zap-results
          cp .zap/generate-sarif.js zap-results/
          cp .zap/zap-automation.yaml zap-results/
          chmod -R 777 zap-results

      - name: Run OWASP ZAP via Docker with SARIF script
        run: |
          docker run --rm -v ${{ github.workspace }}/zap-results:/zap/wrk \
            -w /zap/wrk \
            ghcr.io/zaproxy/zaproxy \
            zap.sh -cmd -addoninstall sarifreport \
            -autorun /zap/wrk/zap-automation.yaml || true

      - name: Show ZAP output
        run: ls -l zap-results

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ github.workspace }}/zap-results/zap-report.sarif
